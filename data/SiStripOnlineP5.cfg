process SiStripOnline = {

//////////////////////////////////////////////////////////////////////////
// Services (including cable map & Geometry)
//////////////////////////////////////////////////////////////////////////

# Message routing 

service = MLlog4cplus { }

service = MessageLogger {
    untracked PSet log4cplus = { untracked string threshold = "DEBUG" }
    untracked vstring debugModules = { } //@@ comment to suppress
    untracked vstring suppressDebug   = { }
    untracked vstring suppressInfo    = { }
    untracked vstring suppressWarning = { }
}

# DQM setup

service = DQMStore { }

service = FUShmDQMOutputService {
    untracked int32 initialMessageBufferSize = 1000000
    double lumiSectionsPerUpdate = 1.0
    bool useCompression = true
    int32 compressionLevel = 1
    untracked int32 lumiSectionInterval = 20
}

# configuration database

service = SiStripConfigDb {
    untracked bool   UsingDb      = true
    untracked bool   UsingDbCache = true
    untracked string SharedMemory = "FEDSM00"
}

# Event Setup Sources and Modules

es_source PedestalsFromConfigDb = SiStripPedestalsBuilderFromDb { }
es_source NoiseFromConfigDb = SiStripNoiseBuilderFromDb { }
es_source FedCablingFromConfigDb = SiStripFedCablingBuilderFromDb {
    untracked string CablingSource = "UNDEFINED"
}

service = SiStripCondObjBuilderFromDb{}

# produce SiStripFecCabling and SiStripDetCabling out of SiStripFedCabling
es_module sistripconn = SiStripConnectivity {}

# magnetic field
es_source idealMagneticFieldRecordSource = EmptyESSource {
    string recordName = "IdealMagneticFieldRecord"
    bool iovIsRunNotTime = true
    vuint32 firstValid = {1}
}

es_module = UniformMagneticFieldESProducer {
  double ZFieldInTesla = 0.0
}
es_prefer = UniformMagneticFieldESProducer{}

#Geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"

#stripCPE
es_module = StripCPEfromTrackAngleESProducer {
    string ComponentName = "StripCPEfromTrackAngle"
}

#pixelCPE
es_module = PixelCPEParmErrorESProducer {
       string ComponentName = "PixelCPEfromTrackAngle"
       string PixelErrorParametrization = "NOTcmsim"
       bool   Alpha2Order = true

       # use new parameterization from CalibTracker/SiPixelErrorEstimation
       # errors are read in "PixelErrorParameterization.cc" from "data/residuals.dat"
       bool UseNewParametrization = true

       # use Gaussian errors by default
       # if "UseSigma = false", then use RMS errors - not recommended
       bool UseSigma = true

}

#TransientTrackingBuilder
es_module ttrhbwr= TkTransientTrackingRecHitBuilderESProducer{
        string ComponentName = "WithTrackAngle"
        string StripCPE = "StripCPEfromTrackAngle"
        string PixelCPE = "PixelCPEfromTrackAngle"
        string Matcher  = "StandardMatcher"
}

#MeasurementTracker
es_module MeasurementTracker = MeasurementTrackerESProducer
{
  string ComponentName        = ""
  string pixelClusterProducer = "siPixelClusters"
  string stripClusterProducer = "siStripClusters"
  string PixelCPE             = "PixelCPEfromTrackAngle"
  string StripCPE             = "StripCPEfromTrackAngle"
  #string StripCPE             = "SimpleStripCPE"
  # -- use simpleCPE untile the TkGluedMeasurementDet is
  #    not corrected to handle properly the track direction

  string HitMatcher           = "StandardMatcher"

  # bool   UseStripCablingDB    = false # NOT LONGER SUPPORTED, see below
  # bool   UseStripNoiseDB      = false # NOT LONGER SUPPORTED, see below

  bool UseStripModuleQualityDB   = false # read Module status from SiStripQuality
  bool UseStripAPVFiberQualityDB = false # read APV and Fiber status from SiStripQuality
  bool UseStripStripQualityDB    = false # read Strip status from SiStripQuality
  untracked bool DebugStripModuleQualityDB   = false # dump out info om module status
  untracked bool DebugStripAPVFiberQualityDB = false # dump out info om module status
  untracked bool DebugStripStripQualityDB    = false # dump out info om module status

  bool   Regional             = false
  #stripLazyGetterProducer label only matters if Regional=true
  string stripLazyGetterProducer = ""
  bool   OnDemand             = false
}

//////////////////////////////////////////////////////////////////////////
// Input + Raw2Digis
//////////////////////////////////////////////////////////////////////////

source = DaqSource {
    untracked string readerPluginName = "FUShmReader"
    untracked uint32 evtsPerLS = 200
}

module digis = SiStripRawToDigiModule {
    untracked string ProductLabel = "source"
    untracked string ProductInstance = ""
    untracked bool CreateDigis = true
    untracked int32 AppendedBytes = 0
    untracked int32 FedBufferDumpFreq = 0
    untracked int32 FedEventDumpFreq = 0
    untracked bool UseFedKey = true
    untracked int32 TriggerFedId = -1
}

//////////////////////////////////////////////////////////////////////////
// Runtype filter
//////////////////////////////////////////////////////////////////////////

module trackingRunTypeFilter = SiStripCommissioningRunTypeFilter {
  InputTag InputModuleLabel = digis
  vstring runTypes = { "ApvLatency", "FineDelay" }
}

//////////////////////////////////////////////////////////////////////////
// Local reconstruction
//////////////////////////////////////////////////////////////////////////
es_source = SiStripGainFakeESSource {
        FileInPath file = "CalibTracker/SiStripCommon/data/SiStripDetInfo.dat"
}
es_module = SiStripGainESProducer {
        bool AutomaticNormalization=false
        double NormalizationFactor=1.
        untracked bool printDebug=false
}
es_source = SiStripLAFakeESSource {
        FileInPath file = "CalibTracker/SiStripCommon/data/SiStripDetInfo.dat"
        double AppliedVoltage = 150.
        double ChargeMobility = 480.
        double Temperature = 297.
        double TemperatureError =10.
        double HoleSaturationVelocity = 8.37e6
        double HoleBeta = 1.213
        double HoleRHAllParameter = 0.7
}
es_module = SiStripRecHitMatcherESProducer {
       string ComponentName = "StandardMatcher"
       double NSigmaInside = 3.
}
es_source = SiStripQualityFakeESSource { }
es_source = SiPixelFakeLorentzAngleESSource {
FileInPath file = "CalibTracker/SiPixelESProducers/data/PixelSkimmedGeometry.txt"
}

es_source = SiStripThresholdFakeESSource {
        FileInPath file = "CalibTracker/SiStripCommon/data/SiStripDetInfo.dat"
        double LowTh = 2.0
        double HighTh = 5.0
}


module  siStripZeroSuppression =  SiStripZeroSuppression {

    VPSet RawDigiProducersList = {
        {  string RawDigiProducer = "SiStripDigis" string RawDigiLabel = "VirginRaw"    }
        ,{ string RawDigiProducer = "SiStripDigis" string RawDigiLabel = "ProcessedRaw" }
        ,{ string RawDigiProducer = "SiStripDigis" string RawDigiLabel = "ScopeMode"   }
    }

    string ZeroSuppressionMode  = "SiStripFedZeroSuppression"
    uint32 FEDalgorithm  = 4
    string CommonModeNoiseSubtractionMode = "Median" #Supported modes: Median, TT6, FastLinear

    double CutToAvoidSignal = 3  ## Used only if  CommonModeNoiseSubtractionMode= "TT6"

}

replace siStripZeroSuppression.RawDigiProducersList = {
         { string RawDigiProducer = "digis" string RawDigiLabel = "VirginRaw"    }
        ,{ string RawDigiProducer = "digis" string RawDigiLabel = "ProcessedRaw" }
        ,{ string RawDigiProducer = "digis" string RawDigiLabel = "ScopeMode"    }
    }

module siStripClusters =  SiStripClusterizer {
    VPSet DigiProducersList = {
        #                { string DigiProducer = "stripdigi"
        #                  string DigiLabel    = "\0"
        #                },
        { string DigiProducer = "SiStripDigis"
            string DigiLabel    = "ZeroSuppressed"
        },
        { string DigiProducer = "siStripZeroSuppression"
            string DigiLabel    = "VirginRaw"
        },
        { string DigiProducer = "siStripZeroSuppression"
            string DigiLabel    = "ProcessedRaw"
        },
        { string DigiProducer = "siStripZeroSuppression"
            string DigiLabel    = "ScopeMode"
        }
    }

    string SiStripQualityLabel = "" //Use SiStripQualityLabel="NULL" to use self build empty SiStripQuality


    string ClusterMode         = "ThreeThresholdClusterizer"
    double ChannelThreshold    = 2.0
    double SeedThreshold       = 3.0
    double ClusterThreshold    = 5.0
    int32 MaxHolesInCluster    = 0
}

replace siStripClusters.DigiProducersList = {
         { string DigiProducer = "digis"
             string DigiLabel    = "ZeroSuppressed"
         },
         { string DigiProducer = "siStripZeroSuppression"
             string DigiLabel    = "VirginRaw"
         },
         { string DigiProducer = "siStripZeroSuppression"
             string DigiLabel    = "ProcessedRaw"
         },
         { string DigiProducer = "siStripZeroSuppression"
             string DigiLabel    = "ScopeMode"
         }
    }
replace siStripClusters.ChannelThreshold = 2.0
replace siStripClusters.SeedThreshold    = 3.0
replace siStripClusters.ClusterThreshold = 5.0

//////////////////////////////////////////////////////////////////////////
// Tracking
//////////////////////////////////////////////////////////////////////////

# General Tracking
module siStripMatchedRecHits = SiStripRecHitConverter{
    untracked int32 VerbosityLevel = 1
    string ClusterProducer = "siStripClusters"
    bool Regional = false
    # next label (LazyGetterProducer) is only used if Regional is true
    string LazyGetterProducer = "SiStripRawToClustersFacility"
    string StripCPE = "StripCPEfromTrackAngle"
    string Matcher = "StandardMatcher"
    string matchedRecHits = "matchedRecHit"
    string rphiRecHits = "rphiRecHit"
    string stereoRecHits = "stereoRecHit"
}

## COSMIC TRACK FINDER

# Seeds
module cosmicseedfinder= CosmicSeedGenerator{
    bool doClusterCheck = true
    InputTag ClusterCollectionLabel = siStripClusters
    uint32 MaxNumberOfCosmicClusters = 300
    InputTag matchedRecHits = siStripMatchedRecHits:matchedRecHit
    InputTag rphirecHits    = siStripMatchedRecHits:rphiRecHit
    InputTag stereorecHits  = siStripMatchedRecHits:stereoRecHit
    double ptMin=0.9
    double originRadius=150
    double originHalfLength=90
    double originZPosition=0
    double SeedPt = 1.0
    untracked string HitsForSeeds = "pairs"  
    string TTRHBuilder        =  "WithTrackAngle"       
    untracked string GeometricStructure  = "STANDARD" //other choice: TIBD+
  }

# tracking
module cosmictrackfinder= CosmicTrackFinder{
    bool TrajInEvents=true
    InputTag cosmicSeeds = cosmicseedfinder
    InputTag matchedRecHits = siStripMatchedRecHits:matchedRecHit
    InputTag rphirecHits    = siStripMatchedRecHits:rphiRecHit
    InputTag stereorecHits  = siStripMatchedRecHits:stereoRecHit
    InputTag pixelRecHits   = dummy:dummy
    int32 MinHits=4
    double Chi2Cut= 300.
    string TTRHBuilder    =   "WithTrackAngle"
    untracked string GeometricStructure  = "STANDARD"
    untracked bool debug = true
    # nested parameter set for TransientInitialStateEstimator
    PSet TransientInitialStateEstimatorParameters =
       {
          string propagatorAlongTISE    = "PropagatorWithMaterial"
          string propagatorOppositeTISE = "PropagatorWithMaterialOpposite"
       }
}

//////////////////////////////////////////////////////////////////////////
// fine delay reconstruction
//////////////////////////////////////////////////////////////////////////

module siStripFineDelayHit = SiStripFineDelayHit {
       # general parameters
       bool cosmic = true
       bool MagneticField = false
       string mode = "DelayScan"
       InputTag ClustersLabel = siStripClusters
       bool NoTracking = false
       # with tracks
         bool TrajInEvent = true
	 string TTRHBuilder = "WithTrackAngle"
         double MaxTrackAngle = 45
         double MinTrackMomentum = 0
         double MaxClusterDistance = 2
         InputTag TracksLabel = cosmictrackfinder
         InputTag SeedsLabel = cosmicseedfinder
           # to avoid the cluster threshold
           bool NoClustering = true
           uint32 ExplorationWindow = 10
           InputTag DigiLabel = siStripZeroSuppression:VirginRaw
       # the label for EventSummary
       InputTag InputModuleLabel = digis
}

//////////////////////////////////////////////////////////////////////////
// Commissioning source
//////////////////////////////////////////////////////////////////////////

module histosA = SiStripCommissioningSource {
        string InputModuleLabel = "digis"
        string SummaryInputModuleLabel = "digis"
        untracked int32 HistoUpdateFreq = 10
        untracked string RootFileName = "SiStripCommissioningSource"
        untracked string CommissioningTask = "UNDEFINED"
}

module histosB = SiStripCommissioningSource {
        string InputModuleLabel = "siStripFineDelayHit"
        string SummaryInputModuleLabel = "digis"
        untracked int32 HistoUpdateFreq = 10
        untracked string RootFileName = "SiStripCommissioningSource"
        untracked string CommissioningTask = "UNDEFINED"
        double SignalToNoiseCut = 3.
}

//////////////////////////////////////////////////////////////////////////
// Commissioning source
//////////////////////////////////////////////////////////////////////////

module consumer = ShmStreamConsumer {
    untracked int32 max_event_size = 7000000
    untracked bool use_compression = true
    untracked int32 compression_level = 1
    untracked vstring outputCommands = {
            "drop *",
            "keep FEDRawDataCollection_*_*_*"
        }
}

//////////////////////////////////////////////////////////////////////////
// Commissioning path
//////////////////////////////////////////////////////////////////////////

sequence localReco = { siStripZeroSuppression, siStripClusters, siStripMatchedRecHits }
sequence tracking  = { cosmicseedfinder, cosmictrackfinder, siStripFineDelayHit }

path withoutTk = { digis, !trackingRunTypeFilter & histosA }
path withTk    = { digis, trackingRunTypeFilter  & localReco, tracking, histosB }

endpath e1 = { consumer }

//////////////////////////////////////////////////////////////////////////
}

